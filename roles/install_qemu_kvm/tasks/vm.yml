---
- name: Reset VM
  shell: |
    if virsh list | grep "{{ vm.name }}"; then
      virsh destroy "{{ vm.name }}" || true;
      virsh undefine "{{ vm.name }}" --remove-all-storage || true;
      rm -r /virt/vms/{{ vm.name }} || true;
    fi
  when: reset_vms is defined and reset_vms == True

# Check if VM exists
- name: "{{ vm.name }} :: VM storage location "
  file:
    state: directory
    path: /virt/vms/{{ vm.name }}

- name: "{{ vm.name }} :: copy-on-write image"
  stat:
    path: /virt/vms/{{ vm.name }}/{{ vm.name }}.qcow2
    get_checksum: false
  register: vm_stat

# Generate kick-off
- name: "{{ vm.name }} :: cloud-config file"
  template:
    src: templates/cloud-config.yml.j2
    dest: /virt/vms/{{ vm.name }}/cloud-config.yml
  when: vm_stat.stat.exists == false

- name: "{{ vm.name }} :: network metadata file"
  template:
    src: templates/network-config-v2.yml.j2
    dest: /virt/vms/{{ vm.name }}/network-config-v2.yml
  when: vm_stat.stat.exists == false

- name: "{{ vm.name }} :: cloud-config image"
  shell: cloud-localds --network-config=/virt/vms/{{ vm.name }}/network-config-v2.yml /virt/vms/{{ vm.name }}/cloud-config.img /virt/vms/{{ vm.name }}/cloud-config.yml
  when: vm_stat.stat.exists == false


# Configure and launch VM
- name: "{{ vm.name }} :: Provision Virtual Machine disk"
  copy:
    src: /virt/images/jammy-server-cloudimg-amd64.qcow2
    dest: /virt/vms/{{ vm.name }}/{{ vm.name }}.qcow2
    remote_src: true
  when: vm_stat.stat.exists == false

- name: "{{ vm.name }} :: Resize Virtual Machine disk"
  shell: qemu-img resize /virt/vms/{{ vm.name }}/{{ vm.name }}.qcow2 {{ vm.disk|default('5G') }}
  when: vm_stat.stat.exists == false

- name: "{{ vm.name }} :: Create virtual machine "
  shell: >
          virt-install
          --noautoconsole
          --name {{ vm.name }}
          --memory {{ vm.mem|default('512') }}
          --vcpus  {{ vm.cpu|default('1') }}
          --disk /virt/vms/{{ vm.name }}/{{ vm.name }}.qcow2,device=disk,bus=virtio
          --disk /virt/vms/{{ vm.name }}/cloud-config.img,device=cdrom
          --os-variant ubuntu22.04
          --virt-type kvm
          --graphics none
          --network network={{ vm.bridge|default('default') }},model=virtio
          --import
  when: vm_stat.stat.exists == false

# Set VM Autostartup
- name: "{{ vm.name }} start with host startup"
  virt:
    name: "{{ vm.name }}"
    autostart: true
