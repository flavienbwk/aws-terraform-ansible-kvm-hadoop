---

# Creating and configuring VPN server
- hosts: "vpnserver"
  gather_facts: True
  become: True
  tags: vpn-server
  tasks:
    - name: Get user HOME directory
      command: echo $HOME
      register: user_home_cmd
      changed_when: False
    - name: Define user home directory
      set_fact:
        user_home: "{{ user_home_cmd.stdout }}"
      changed_when: False
    - name: Generate an OpenSSH keypair
      openssh_keypair:
        path: "{{ user_home }}/.ssh/id_rsa"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
    - name: Retrieve SSH public key
      fetch:
        src: "{{ user_home }}/.ssh/id_rsa.pub"
        dest: "../files/vpnserver/id_rsa.pub"
        flat: True
    - name: Create OpenVPN server
      include_role:
        name: setup_openvpn
      vars:
        openvpn_role: "server"
    - name: Retrieve OpenVPN certificates for client
      fetch:
        src: /etc/openvpn/easy-rsa/pki/{{ item }}
        dest: ../files/vpnserver/{{ item | basename }}
        flat: True
      loop:
        - ca.crt
        - issued/client.crt
        - private/client.key
        - ta.key


# Making sure VPN server can connect to client adding its SSH key
- hosts: "vpn_clients"
  gather_facts: True
  become: True
  tags: vpn-server
  tasks:
    - name: Get user HOME directory
      command: echo $HOME
      register: user_home_cmd
      changed_when: False
    - name: Define user home directory
      set_fact:
        user_home: "{{ user_home_cmd.stdout }}"
      changed_when: False
    - name: Put server's public key to client
      lineinfile:
        path: "{{ user_home }}/.ssh/authorized_keys"
        line: "{{ lookup('file', '../files/vpnserver/id_rsa.pub') }}"


# Installing KVM on machines
- hosts: "kvm_hosts"
  gather_facts: True
  become: False
  tags: kvm-install
  tasks:
    - name: Get user HOME directory
      command: echo $HOME
      register: user_home_cmd
      changed_when: False
    - name: Define user home directory
      set_fact:
        user_home: "{{ user_home_cmd.stdout }}"
      changed_when: False
    - name: Generate an OpenSSH keypair
      openssh_keypair:
        path: "{{ user_home }}/.ssh/id_rsa"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
    - name: Retrieve SSH public key
      fetch:
        src: "{{ user_home }}/.ssh/id_rsa.pub"
        dest: "../files/{{ inventory_hostname }}_id_rsa.pub"
        flat: True
- hosts: "kvm_hosts"
  gather_facts: True
  become: True
  tags: kvm-install
  tasks:
    - name: "Install KVM machines"
      include_role:
        name: install_qemu_kvm
      vars:
        network_name: "{{ kvm_interface_name }}"
        reset_vms: "{{ kvm_reset_vms }}"
        virtual_machines:
          - name: "{{ inventory_hostname }}-node-1"
            cpu: 1
            mem: 2048
            disk: 8G
            bridge: "{{ network_name }}"
            net:
              ip: 192.168.30.2/24
              gateway: 192.168.30.1
              nameservers: "192.168.30.1,8.8.8.8"
          - name: "{{ inventory_hostname }}-node-2"
            cpu: 1
            mem: 2048
            disk: 8G
            bridge: "{{ network_name }}"
            net:
              ip: 192.168.30.3/24
              gateway: 192.168.30.1
              nameservers: "192.168.30.1,8.8.8.8"
          - name: "{{ inventory_hostname }}-node-3"
            cpu: 2
            mem: 2048
            disk: 8G
            bridge: "{{ network_name }}"
            net:
              ip: 192.168.30.4/24
              gateway: 192.168.30.1
              nameservers: "192.168.30.1,8.8.8.8"
          - name: "{{ inventory_hostname }}-node-4"
            cpu: 2
            mem: 2048
            disk: 8G
            bridge: "{{ network_name }}"
            net:
              ip: 192.168.30.5/24
              gateway: 192.168.30.1
              nameservers: "192.168.30.1,8.8.8.8"
        users:
          - name: root
            full_name: root
            pub_keys:
              - "{{ lookup('file', '../files/vpnserver/id_rsa.pub') | trim }}"
              - "{{ lookup('file', '../files/{{ inventory_hostname }}_id_rsa.pub') | trim }}"


# Configure hosts details to further configure each KVM guest
# Reaching KVM guests through their respective host
- hosts: "kvm_hosts"
  gather_facts: False
  tags: [ 'vpn-client',  'hadoop' ]
  serial: 1 # Making this playbook NOT run parallely https://stackoverflow.com/a/42110297/4958081
  tasks:
    - name: "Building the VPN guests inventory variables"
      add_host:
        name: "{{ item.name }}"
        ansible_host: "{{ item.ip }}"
        ansible_user: "root"
        ansible_ssh_common_args: "-o ControlMaster=auto -o ControlPersist=60s -o ControlPath=~/.ansible/cp/{{inventory_hostname}}-ssh-%h-%p-%r -o StrictHostKeyChecking=no -o ForwardAgent=yes -o ProxyCommand=\"ssh -T -q -o 'ForwardAgent yes' {{ ansible_user }}@{{ hostvars[inventory_hostname].ansible_host }} 'ssh-add -t 60 && nc %h %p'\"" # Connect to guests through their respective hosts
        groups: [ "machines", "vpn_clients", "kvm_guests" ]
      loop:
        - name: "{{ inventory_hostname }}-node-1"
          ip: "192.168.30.2"
        - name: "{{ inventory_hostname }}-node-2"
          ip: "192.168.30.3"
        - name: "{{ inventory_hostname }}-node-3"
          ip: "192.168.30.4"
        - name: "{{ inventory_hostname }}-node-4"
          ip: "192.168.30.5"


# Configure VPN clients
- hosts: "vpn_clients"
  gather_facts: True
  tags: vpn-client
  become: True
  tasks:
    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
    - name: Create destination directories
      file:
        path: "/etc/openvpn/client/{{ item }}"
        state: directory
      loop:
        - issued
        - private
    - name: Copy certificates and keys to the client
      copy:
        content: "{{ lookup('file', '../files/vpnserver/' + item | trim | basename) }}"
        dest: /etc/openvpn/client/{{ item | basename }}
        mode: "0640"
      loop:
        - ca.crt
        - client.crt
        - client.key
        - ta.key
    - name: Connect OpenVPN client
      include_role:
        name: setup_openvpn
      vars:
        openvpn_role: "client"
        openvpn_server_endpoint: "{{ hostvars[groups['vpnserver'][0]].ansible_host }}"


# Retrieve VPN IPs of each KVM guest
- hosts: "kvm_guests"
  gather_facts: False
  tags: hadoop
  tasks:
    - name: "Retrieving VPN IPs"
      shell: ip -f inet addr show tun0 | sed -En -e 's/.*inet ([0-9.]+).*/\1/p'
      register: cmd_tun0_ip
      changed_when: False
    - name: Get user HOME directory
      command: echo $HOME
      register: user_home_cmd
      changed_when: False
    - name: Define user home directory
      set_fact:
        user_home: "{{ user_home_cmd.stdout }}"
      changed_when: False
    - name: Generate an OpenSSH keypair
      openssh_keypair:
        path: "{{ user_home }}/.ssh/id_rsa"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
    - name: "Get public key"
      shell: cat "{{ user_home }}/.ssh/id_rsa.pub"
      register: cmd_public_key
      changed_when: False
    - name: "Setting IP and public key"
      set_fact:
        vpn_ip: "{{ cmd_tun0_ip.stdout_lines[0] | trim }}"
        public_key: "{{ cmd_public_key.stdout | trim }}"


# Set Hadoop node role associated with VPN IP for each KVM guest
# Reaching KVM guests through the VPN server
- hosts: "kvm_hosts"
  gather_facts: False
  serial: 1
  tags: [ 'vpn-client',  'hadoop' ]
  tasks:
    - name: "Processing {{ item.group }} : {{ item.name }}"
      add_host:
        name: "{{ item.name }}"
        ansible_host: "{{ item.vpn_ip }}"
        ansible_ssh_common_args: "-o ControlMaster=auto -o ControlPersist=60s -o ControlPath=~/.ansible/cp/{{ item.name }}-vpn-%h-%p-%r -o StrictHostKeyChecking=no -o ForwardAgent=yes -o ProxyCommand=\"ssh -T -q -o 'ForwardAgent yes' {{ hostvars[groups['vpnserver'][0]].ansible_user }}@{{ hostvars[groups['vpnserver'][0]].ansible_host}} 'ssh-add -t 60 && nc %h %p'\"" # Connect to guests through their respective hosts
        public_key: "{{ item.public_key }}"
        groups: [ "{{ item.group }}" ]
      loop:
        - name: "{{ inventory_hostname }}-node-1"
          vpn_ip: "{{ hostvars[inventory_hostname + '-node-1'].vpn_ip }}"
          public_key: "{{ hostvars[inventory_hostname + '-node-1'].public_key }}"
          group: "hadoop_namenodes"
        - name: "{{ inventory_hostname }}-node-2"
          vpn_ip: "{{ hostvars[inventory_hostname + '-node-2'].vpn_ip }}"
          public_key: "{{ hostvars[inventory_hostname + '-node-2'].public_key }}"
          group: "hadoop_managers"
        - name: "{{ inventory_hostname }}-node-3"
          vpn_ip: "{{ hostvars[inventory_hostname + '-node-3'].vpn_ip }}"
          public_key: "{{ hostvars[inventory_hostname + '-node-3'].public_key }}"
          group: "hadoop_datanodes"
        - name: "{{ inventory_hostname }}-node-4"
          vpn_ip: "{{ hostvars[inventory_hostname + '-node-4'].vpn_ip }}"
          public_key: "{{ hostvars[inventory_hostname + '-node-4'].public_key }}"
          group: "hadoop_datanodes"
# Making namenodes reachable with each other
- hosts: "hadoop_namenodes"
  gather_facts: False
  tags: [ 'vpn-client',  'hadoop' ]
  tasks:
    - name: "Adding authorized SSH key for each namenode guest"
      authorized_key:
        user: "{{ hostvars[item].ansible_user }}"
        state: present
        key: "{{ hostvars[item].public_key }}"
      loop: "{{ groups['hadoop_namenodes'] }}"


# Create the Hadoop cluster with HA mode on the KVM guests
- hosts: "hadoop"
  gather_facts: True
  tags: hadoop-install
  vars:
    hadoop_cluster_name: mycluster
    hadoop_reformat_namenode: "{{ hadoop_reformat_namenode }}"
  roles:
    - install_hadoop
